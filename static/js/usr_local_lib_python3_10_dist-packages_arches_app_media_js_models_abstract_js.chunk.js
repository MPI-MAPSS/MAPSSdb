/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmapss"] = self["webpackChunkmapss"] || []).push([["usr_local_lib_python3_10_dist-packages_arches_app_media_js_models_abstract_js"],{

/***/ "../../../../usr/local/lib/python3.10/dist-packages/arches/app/media/js/models/abstract.js":
/*!*************************************************************************************************!*\
  !*** ../../../../usr/local/lib/python3.10/dist-packages/arches/app/media/js/models/abstract.js ***!
  \*************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ \"./media/node_modules/backbone/backbone-min.js\"), __webpack_require__(/*! jquery */ \"./media/node_modules/jquery/dist/jquery.min.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, $) {\n  return Backbone.Model.extend({\n    /**\n     * A backbone model to manage RESTful requests on a per model basis\n     * @constructor\n     * @name AbstractModel\n    */\n\n    /**\n     * Issues a request for a model instance from the server using the id of the model in the url\n     * @memberof AbstractModel.prototype\n     * @param  {function} callback - the function to call when the request returns\n     * @param  {object} scope - (optional) the scope used for the callback\n     * @return  {jqXHR} - a Proimise compatible asynchronous request\n    */\n    read: function read(callback, scope) {\n      var method = \"GET\";\n      return this._doRequest({\n        type: method,\n        data: {\n          'format': 'json'\n        },\n        url: this._getURL(method)\n      }, callback, scope, 'read');\n    },\n    /**\n     * Posts a model back to the server using the id of the model in the url\n     * @memberof AbstractModel.prototype\n     * @param  {function} callback - the function to call when the request returns\n     * @param  {object} scope - (optional) the scope used for the callback\n     * @return  {jqXHR} - a Proimise compatible asynchronous request\n    */\n    save: function save(callback, scope) {\n      var method = \"POST\";\n      return this._doRequest({\n        type: method,\n        url: this._getURL(method),\n        data: JSON.stringify(this.toJSON())\n      }, callback, scope, 'save');\n    },\n    /**\n     * Sends a delete request to the server using the id of the model in the url\n     * @memberof AbstractModel.prototype\n     * @param  {function} callback - the function to call when the request returns\n     * @param  {object} scope - (optional) the scope used for the callback\n     * @return  {jqXHR} - a Proimise compatible asynchronous request\n    */\n    delete: function _delete(callback, scope) {\n      var method = \"DELETE\";\n      return this._doRequest({\n        type: method,\n        url: this._getURL(method),\n        data: JSON.stringify(this.toJSON())\n      }, callback, scope, 'delete');\n    },\n    /**\n     * Returns the url of the model to use in requests to the server, replaces the placeholder \n     * id 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', if it exists in the url, with the model id, otherwise appends the model id\n     * @memberof AbstractModel.prototype\n     * @param  {string} method - the type of request being made either \"GET\", \"POST\", \"DELETE\"\n    */\n    _getURL: function _getURL(method) {\n      var id = this.get('id');\n      if (!id) {\n        id = '';\n      }\n      if (this.url.indexOf('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') > -1) {\n        return this.url.replace('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', id);\n      } else {\n        return this.url + id;\n      }\n    },\n    /**\n     * _doRequest - a wrapper around a simple ajax call\n     * @memberof AbstractModel.prototype\n     * @param  {object} config - a config object to pass to the ajax request\n     * @param  {function} callback - function to call when the request returns\n     * @param  {object} scope - (optional) the scope used for the callback\n     * @param  {string} eventname - (optional) the event to trigger upon successfull return of the request\n     * @return  {jqXHR} - a Proimise compatible asynchronous request\n     */\n    _doRequest: function _doRequest(config, callback, scope, eventname) {\n      var self = this;\n      if (!scope) {\n        scope = self;\n      }\n      return $.ajax($.extend({\n        complete: function complete(request, status) {\n          if (typeof callback === 'function') {\n            callback.call(scope, request, status, self);\n          }\n          if (status === 'success') {\n            self.trigger(eventname, self);\n          }\n        }\n      }, config));\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://mapss/../../../../usr/local/lib/python3.10/dist-packages/arches/app/media/js/models/abstract.js?");

/***/ })

}]);